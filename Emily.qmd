---
title: "Emily"
format: pdf
editor: source
---

## Setup:

```{r}
#Load the appropriate libraries
library(zcurve)
library(dplyr)
library(ggplot2)
```

## Z-curve:

```{r, warning=FALSE}
#Read in the data:
data <- read.csv("z_curve_test_data/Z_curve_data_set_copy.csv")

#Data cleaning
data_clean <- data %>%
  mutate( #Replace blank values with NA's
    p = replace(p, p=="", NA),
    Z = replace(Z, Z=="", NA),
    t = replace(t, t=="", NA),
    chi = replace(chi, chi=="", NA),
    upper = replace(upper, upper=="", NA),
    lower = replace(lower, lower=="", NA),
    n = replace(n, n=="", NA)
  ) %>%
  mutate(
    #Set these columns to be numeric
    across(c(Z, upper, lower, n), ~ as.numeric(.)),
    #Set test statistics to be a character
    across(c(p, t, chi), ~ as.character(.))
  )

#Subsets for test stats
data_clean_p <- data_clean %>% filter(!is.na(p))
data_clean_t <- data_clean %>% filter(!is.na(t))
data_clean_chi <- data_clean %>% filter(!is.na(chi))

#Empty vectors for precise p-values and censored p-values
p_values <- c()
p_lb <- c()
p_ub <- c()

#Add p-values to vectors from raw p-values
if(nrow(data_clean_p) > 0){ #Check if data has p-values to begin with
  p_data <- zcurve_data(data_clean_p$p)
  p_values <- c(p_values, p_data$precise$p)
  p_lb <- c(p_lb, p_data$censored$p.lb)
  p_ub <- c(p_ub, p_data$censored$p.ub)
}
#Add p-values to vectors from t-values
if(nrow(data_clean_t) > 0){ #Check if data has t-values to begin with
  t_data <- zcurve_data(data_clean_t$t)
  p_values <- c(p_values, t_data$precise$p)
  p_lb <- c(p_lb, t_data$censored$p.lb)
  p_ub <- c(p_ub, t_data$censored$p.ub)
}
#Add p-values to vectors from chi-squared values
if(nrow(data_clean_chi) > 0){ #Check if data has chi values to begin with
  chi_data <- zcurve_data(data_clean_chi$chi)
  p_values <- c(p_values, chi_data$precise$p)
  p_lb <- c(p_lb, chi_data$censored$p.lb)
  p_ub <- c(p_ub, chi_data$censored$p.ub)
}

#Calculate z-scores from confidence intervals (and sample size)
calc_z_from_ci <- data_clean %>% 
  filter(
    !is.na(upper) & !is.na(lower) & !is.na(n)
  ) %>%
  mutate(
    z_ci = ((upper+lower)/2) / ((upper-lower)/(2*1.96*sqrt(n)))
  )
data_clean_ci <- calc_z_from_ci %>% filter(!is.na(z_ci))

#Combine original z-scored and the z-scores calculated from CIs
z <- c(data_clean$Z[!is.na(data_clean$Z)],
       data_clean_ci$z_ci)

#Create a zcurve object with the inputs and use the EM method
zcurve_obj <-zcurve(z = z, 
                    p = p_values, 
                    p.lb = p_lb, 
                    p.ub = p_ub, 
                    method="EM",
                    bootstrap=500)

#Use the base plot to see how it looks
plot(zcurve_obj)
 
#Create the summary table
summary.zcurve(zcurve_obj)

#Use the z-curve plotting function
zcurve_plot <-plot.zcurve(zcurve_obj,
                          #Scale the chart to the extrapolated area
                          extrapolate = TRUE,
                          #Add the annotation with the ODR, EDR, and ERR
                          annotation = TRUE,
                          #Add the CI
                          CI=TRUE,
                          #Make it a ggplot object so we can alter thematic
                          #elements
                          plot_type= 'ggplot')

#Modify the plot for readability
zcurve_plot <- zcurve_plot +
  
  #Add appropriate labels and citations
  labs(caption="Bartoš F, Schimmack U (2020). “zcurve: An R Package for Fitting Z-curves.” R package version 2.4.2",
       x= "Z-Scores",
       title="Z-Curve for Nutrition Research (2015-2023)",
       subtitle="(EM via EM)")+
  
  #Adjust plot elements for neatness
  theme(plot.title=element_text(hjust=0.5),
        plot.subtitle= element_text(hjust = 0.5))

#Display the plot
zcurve_plot
```
